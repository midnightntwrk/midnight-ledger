// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(ledger_uniffiFFI)
import ledger_uniffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_ledger_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_ledger_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureLedgerUniffiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol DustParametersProtocol: AnyObject, Sendable {
    
    func dustGracePeriodSeconds()  -> Int64
    
    func generationDecayRate()  -> UInt32
    
    func nightDustRatio()  -> UInt64
    
    func serialize() throws  -> Data
    
    func timeToCapSeconds()  -> Int64
    
    func toString(compact: Bool?)  -> String
    
}
open class DustParameters: DustParametersProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ledger_uniffi_fn_clone_dustparameters(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ledger_uniffi_fn_free_dustparameters(pointer, $0) }
    }

    

    
open func dustGracePeriodSeconds() -> Int64  {
    return try!  FfiConverterInt64.lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_dustparameters_dust_grace_period_seconds(self.uniffiClonePointer(),$0
    )
})
}
    
open func generationDecayRate() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_dustparameters_generation_decay_rate(self.uniffiClonePointer(),$0
    )
})
}
    
open func nightDustRatio() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_dustparameters_night_dust_ratio(self.uniffiClonePointer(),$0
    )
})
}
    
open func serialize()throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_method_dustparameters_serialize(self.uniffiClonePointer(),$0
    )
})
}
    
open func timeToCapSeconds() -> Int64  {
    return try!  FfiConverterInt64.lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_dustparameters_time_to_cap_seconds(self.uniffiClonePointer(),$0
    )
})
}
    
open func toString(compact: Bool?) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_dustparameters_to_string(self.uniffiClonePointer(),
        FfiConverterOptionBool.lower(compact),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDustParameters: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DustParameters

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DustParameters {
        return DustParameters(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DustParameters) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DustParameters {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DustParameters, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDustParameters_lift(_ pointer: UnsafeMutableRawPointer) throws -> DustParameters {
    return try FfiConverterTypeDustParameters.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDustParameters_lower(_ value: DustParameters) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDustParameters.lower(value)
}






public protocol LedgerParametersProtocol: AnyObject, Sendable {
    
    func dust()  -> DustParameters
    
    func serialize() throws  -> Data
    
    func toString(compact: Bool?)  -> String
    
    func transactionCostModel()  -> TransactionCostModel
    
}
open class LedgerParameters: LedgerParametersProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ledger_uniffi_fn_clone_ledgerparameters(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ledger_uniffi_fn_free_ledgerparameters(pointer, $0) }
    }

    

    
open func dust() -> DustParameters  {
    return try!  FfiConverterTypeDustParameters_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_ledgerparameters_dust(self.uniffiClonePointer(),$0
    )
})
}
    
open func serialize()throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_method_ledgerparameters_serialize(self.uniffiClonePointer(),$0
    )
})
}
    
open func toString(compact: Bool?) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_ledgerparameters_to_string(self.uniffiClonePointer(),
        FfiConverterOptionBool.lower(compact),$0
    )
})
}
    
open func transactionCostModel() -> TransactionCostModel  {
    return try!  FfiConverterTypeTransactionCostModel_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_ledgerparameters_transaction_cost_model(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLedgerParameters: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LedgerParameters

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LedgerParameters {
        return LedgerParameters(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LedgerParameters) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LedgerParameters {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LedgerParameters, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLedgerParameters_lift(_ pointer: UnsafeMutableRawPointer) throws -> LedgerParameters {
    return try FfiConverterTypeLedgerParameters.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLedgerParameters_lower(_ value: LedgerParameters) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLedgerParameters.lower(value)
}






public protocol ProofPreimageVersionedProtocol: AnyObject, Sendable {
    
    func serialize() throws  -> Data
    
}
open class ProofPreimageVersioned: ProofPreimageVersionedProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ledger_uniffi_fn_clone_proofpreimageversioned(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ledger_uniffi_fn_free_proofpreimageversioned(pointer, $0) }
    }

    

    
open func serialize()throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_method_proofpreimageversioned_serialize(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofPreimageVersioned: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ProofPreimageVersioned

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ProofPreimageVersioned {
        return ProofPreimageVersioned(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ProofPreimageVersioned) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofPreimageVersioned {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ProofPreimageVersioned, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofPreimageVersioned_lift(_ pointer: UnsafeMutableRawPointer) throws -> ProofPreimageVersioned {
    return try FfiConverterTypeProofPreimageVersioned.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofPreimageVersioned_lower(_ value: ProofPreimageVersioned) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProofPreimageVersioned.lower(value)
}






public protocol ProofVersionedProtocol: AnyObject, Sendable {
    
    func serialize() throws  -> Data
    
}
open class ProofVersioned: ProofVersionedProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ledger_uniffi_fn_clone_proofversioned(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ledger_uniffi_fn_free_proofversioned(pointer, $0) }
    }

    

    
open func serialize()throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_method_proofversioned_serialize(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofVersioned: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ProofVersioned

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ProofVersioned {
        return ProofVersioned(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ProofVersioned) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofVersioned {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ProofVersioned, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofVersioned_lift(_ pointer: UnsafeMutableRawPointer) throws -> ProofVersioned {
    return try FfiConverterTypeProofVersioned.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofVersioned_lower(_ value: ProofVersioned) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProofVersioned.lower(value)
}






public protocol TransactionCostModelProtocol: AnyObject, Sendable {
    
    func serialize() throws  -> Data
    
    func toString(compact: Bool?)  -> String
    
}
open class TransactionCostModel: TransactionCostModelProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ledger_uniffi_fn_clone_transactioncostmodel(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ledger_uniffi_fn_free_transactioncostmodel(pointer, $0) }
    }

    

    
open func serialize()throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_method_transactioncostmodel_serialize(self.uniffiClonePointer(),$0
    )
})
}
    
open func toString(compact: Bool?) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_method_transactioncostmodel_to_string(self.uniffiClonePointer(),
        FfiConverterOptionBool.lower(compact),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionCostModel: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TransactionCostModel

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TransactionCostModel {
        return TransactionCostModel(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TransactionCostModel) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionCostModel {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TransactionCostModel, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionCostModel_lift(_ pointer: UnsafeMutableRawPointer) throws -> TransactionCostModel {
    return try FfiConverterTypeTransactionCostModel.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionCostModel_lower(_ value: TransactionCostModel) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTransactionCostModel.lower(value)
}




public struct Commitment {
    public var hash: HashOutputWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: HashOutputWrapper) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension Commitment: Sendable {}
#endif


extension Commitment: Equatable, Hashable {
    public static func ==(lhs: Commitment, rhs: Commitment) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCommitment: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Commitment {
        return
            try Commitment(
                hash: FfiConverterTypeHashOutputWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: Commitment, into buf: inout [UInt8]) {
        FfiConverterTypeHashOutputWrapper.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCommitment_lift(_ buf: RustBuffer) throws -> Commitment {
    return try FfiConverterTypeCommitment.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCommitment_lower(_ value: Commitment) -> RustBuffer {
    return FfiConverterTypeCommitment.lower(value)
}


public struct HashOutputWrapper {
    public var bytes: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bytes: Data) {
        self.bytes = bytes
    }
}

#if compiler(>=6)
extension HashOutputWrapper: Sendable {}
#endif


extension HashOutputWrapper: Equatable, Hashable {
    public static func ==(lhs: HashOutputWrapper, rhs: HashOutputWrapper) -> Bool {
        if lhs.bytes != rhs.bytes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytes)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHashOutputWrapper: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HashOutputWrapper {
        return
            try HashOutputWrapper(
                bytes: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: HashOutputWrapper, into buf: inout [UInt8]) {
        FfiConverterData.write(value.bytes, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHashOutputWrapper_lift(_ buf: RustBuffer) throws -> HashOutputWrapper {
    return try FfiConverterTypeHashOutputWrapper.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHashOutputWrapper_lower(_ value: HashOutputWrapper) -> RustBuffer {
    return FfiConverterTypeHashOutputWrapper.lower(value)
}


public struct IntentHash {
    public var hash: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: Data) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension IntentHash: Sendable {}
#endif


extension IntentHash: Equatable, Hashable {
    public static func ==(lhs: IntentHash, rhs: IntentHash) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIntentHash: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IntentHash {
        return
            try IntentHash(
                hash: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: IntentHash, into buf: inout [UInt8]) {
        FfiConverterData.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIntentHash_lift(_ buf: RustBuffer) throws -> IntentHash {
    return try FfiConverterTypeIntentHash.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIntentHash_lower(_ value: IntentHash) -> RustBuffer {
    return FfiConverterTypeIntentHash.lower(value)
}


public struct Nonce {
    public var hash: HashOutputWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: HashOutputWrapper) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension Nonce: Sendable {}
#endif


extension Nonce: Equatable, Hashable {
    public static func ==(lhs: Nonce, rhs: Nonce) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNonce: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Nonce {
        return
            try Nonce(
                hash: FfiConverterTypeHashOutputWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: Nonce, into buf: inout [UInt8]) {
        FfiConverterTypeHashOutputWrapper.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNonce_lift(_ buf: RustBuffer) throws -> Nonce {
    return try FfiConverterTypeNonce.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNonce_lower(_ value: Nonce) -> RustBuffer {
    return FfiConverterTypeNonce.lower(value)
}


public struct Nullifier {
    public var hash: HashOutputWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: HashOutputWrapper) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension Nullifier: Sendable {}
#endif


extension Nullifier: Equatable, Hashable {
    public static func ==(lhs: Nullifier, rhs: Nullifier) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNullifier: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Nullifier {
        return
            try Nullifier(
                hash: FfiConverterTypeHashOutputWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: Nullifier, into buf: inout [UInt8]) {
        FfiConverterTypeHashOutputWrapper.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNullifier_lift(_ buf: RustBuffer) throws -> Nullifier {
    return try FfiConverterTypeNullifier.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNullifier_lower(_ value: Nullifier) -> RustBuffer {
    return FfiConverterTypeNullifier.lower(value)
}


public struct OutputInstructionShielded {
    public var amount: Int64
    public var targetKey: PublicKey

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(amount: Int64, targetKey: PublicKey) {
        self.amount = amount
        self.targetKey = targetKey
    }
}

#if compiler(>=6)
extension OutputInstructionShielded: Sendable {}
#endif


extension OutputInstructionShielded: Equatable, Hashable {
    public static func ==(lhs: OutputInstructionShielded, rhs: OutputInstructionShielded) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.targetKey != rhs.targetKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
        hasher.combine(targetKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOutputInstructionShielded: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OutputInstructionShielded {
        return
            try OutputInstructionShielded(
                amount: FfiConverterInt64.read(from: &buf), 
                targetKey: FfiConverterTypePublicKey.read(from: &buf)
        )
    }

    public static func write(_ value: OutputInstructionShielded, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.amount, into: &buf)
        FfiConverterTypePublicKey.write(value.targetKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOutputInstructionShielded_lift(_ buf: RustBuffer) throws -> OutputInstructionShielded {
    return try FfiConverterTypeOutputInstructionShielded.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOutputInstructionShielded_lower(_ value: OutputInstructionShielded) -> RustBuffer {
    return FfiConverterTypeOutputInstructionShielded.lower(value)
}


public struct OutputInstructionUnshielded {
    public var amount: Int64
    public var targetAddress: UserAddress
    public var nonce: Nonce

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(amount: Int64, targetAddress: UserAddress, nonce: Nonce) {
        self.amount = amount
        self.targetAddress = targetAddress
        self.nonce = nonce
    }
}

#if compiler(>=6)
extension OutputInstructionUnshielded: Sendable {}
#endif


extension OutputInstructionUnshielded: Equatable, Hashable {
    public static func ==(lhs: OutputInstructionUnshielded, rhs: OutputInstructionUnshielded) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.targetAddress != rhs.targetAddress {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
        hasher.combine(targetAddress)
        hasher.combine(nonce)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOutputInstructionUnshielded: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OutputInstructionUnshielded {
        return
            try OutputInstructionUnshielded(
                amount: FfiConverterInt64.read(from: &buf), 
                targetAddress: FfiConverterTypeUserAddress.read(from: &buf), 
                nonce: FfiConverterTypeNonce.read(from: &buf)
        )
    }

    public static func write(_ value: OutputInstructionUnshielded, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.amount, into: &buf)
        FfiConverterTypeUserAddress.write(value.targetAddress, into: &buf)
        FfiConverterTypeNonce.write(value.nonce, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOutputInstructionUnshielded_lift(_ buf: RustBuffer) throws -> OutputInstructionUnshielded {
    return try FfiConverterTypeOutputInstructionUnshielded.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOutputInstructionUnshielded_lower(_ value: OutputInstructionUnshielded) -> RustBuffer {
    return FfiConverterTypeOutputInstructionUnshielded.lower(value)
}


public struct ProvingKeyMaterial {
    public var proverKey: Data
    public var verifierKey: Data
    public var irSource: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(proverKey: Data, verifierKey: Data, irSource: Data) {
        self.proverKey = proverKey
        self.verifierKey = verifierKey
        self.irSource = irSource
    }
}

#if compiler(>=6)
extension ProvingKeyMaterial: Sendable {}
#endif


extension ProvingKeyMaterial: Equatable, Hashable {
    public static func ==(lhs: ProvingKeyMaterial, rhs: ProvingKeyMaterial) -> Bool {
        if lhs.proverKey != rhs.proverKey {
            return false
        }
        if lhs.verifierKey != rhs.verifierKey {
            return false
        }
        if lhs.irSource != rhs.irSource {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(proverKey)
        hasher.combine(verifierKey)
        hasher.combine(irSource)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProvingKeyMaterial: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProvingKeyMaterial {
        return
            try ProvingKeyMaterial(
                proverKey: FfiConverterData.read(from: &buf), 
                verifierKey: FfiConverterData.read(from: &buf), 
                irSource: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: ProvingKeyMaterial, into buf: inout [UInt8]) {
        FfiConverterData.write(value.proverKey, into: &buf)
        FfiConverterData.write(value.verifierKey, into: &buf)
        FfiConverterData.write(value.irSource, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProvingKeyMaterial_lift(_ buf: RustBuffer) throws -> ProvingKeyMaterial {
    return try FfiConverterTypeProvingKeyMaterial.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProvingKeyMaterial_lower(_ value: ProvingKeyMaterial) -> RustBuffer {
    return FfiConverterTypeProvingKeyMaterial.lower(value)
}


public struct PublicKey {
    public var hash: HashOutputWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: HashOutputWrapper) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension PublicKey: Sendable {}
#endif


extension PublicKey: Equatable, Hashable {
    public static func ==(lhs: PublicKey, rhs: PublicKey) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePublicKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        return
            try PublicKey(
                hash: FfiConverterTypeHashOutputWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        FfiConverterTypeHashOutputWrapper.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePublicKey_lift(_ buf: RustBuffer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> RustBuffer {
    return FfiConverterTypePublicKey.lower(value)
}


public struct ShieldedCoinInfo {
    public var nonce: Nonce
    public var tokenType: ShieldedTokenType
    public var value: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(nonce: Nonce, tokenType: ShieldedTokenType, value: Int64) {
        self.nonce = nonce
        self.tokenType = tokenType
        self.value = value
    }
}

#if compiler(>=6)
extension ShieldedCoinInfo: Sendable {}
#endif


extension ShieldedCoinInfo: Equatable, Hashable {
    public static func ==(lhs: ShieldedCoinInfo, rhs: ShieldedCoinInfo) -> Bool {
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.tokenType != rhs.tokenType {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(nonce)
        hasher.combine(tokenType)
        hasher.combine(value)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeShieldedCoinInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ShieldedCoinInfo {
        return
            try ShieldedCoinInfo(
                nonce: FfiConverterTypeNonce.read(from: &buf), 
                tokenType: FfiConverterTypeShieldedTokenType.read(from: &buf), 
                value: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: ShieldedCoinInfo, into buf: inout [UInt8]) {
        FfiConverterTypeNonce.write(value.nonce, into: &buf)
        FfiConverterTypeShieldedTokenType.write(value.tokenType, into: &buf)
        FfiConverterInt64.write(value.value, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShieldedCoinInfo_lift(_ buf: RustBuffer) throws -> ShieldedCoinInfo {
    return try FfiConverterTypeShieldedCoinInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShieldedCoinInfo_lower(_ value: ShieldedCoinInfo) -> RustBuffer {
    return FfiConverterTypeShieldedCoinInfo.lower(value)
}


public struct ShieldedTokenType {
    public var hash: HashOutputWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: HashOutputWrapper) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension ShieldedTokenType: Sendable {}
#endif


extension ShieldedTokenType: Equatable, Hashable {
    public static func ==(lhs: ShieldedTokenType, rhs: ShieldedTokenType) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeShieldedTokenType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ShieldedTokenType {
        return
            try ShieldedTokenType(
                hash: FfiConverterTypeHashOutputWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: ShieldedTokenType, into buf: inout [UInt8]) {
        FfiConverterTypeHashOutputWrapper.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShieldedTokenType_lift(_ buf: RustBuffer) throws -> ShieldedTokenType {
    return try FfiConverterTypeShieldedTokenType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShieldedTokenType_lower(_ value: ShieldedTokenType) -> RustBuffer {
    return FfiConverterTypeShieldedTokenType.lower(value)
}


public struct TransactionHash {
    public var hash: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: Data) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension TransactionHash: Sendable {}
#endif


extension TransactionHash: Equatable, Hashable {
    public static func ==(lhs: TransactionHash, rhs: TransactionHash) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionHash: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionHash {
        return
            try TransactionHash(
                hash: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: TransactionHash, into buf: inout [UInt8]) {
        FfiConverterData.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionHash_lift(_ buf: RustBuffer) throws -> TransactionHash {
    return try FfiConverterTypeTransactionHash.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionHash_lower(_ value: TransactionHash) -> RustBuffer {
    return FfiConverterTypeTransactionHash.lower(value)
}


public struct UnshieldedTokenType {
    public var hash: HashOutputWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: HashOutputWrapper) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension UnshieldedTokenType: Sendable {}
#endif


extension UnshieldedTokenType: Equatable, Hashable {
    public static func ==(lhs: UnshieldedTokenType, rhs: UnshieldedTokenType) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnshieldedTokenType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnshieldedTokenType {
        return
            try UnshieldedTokenType(
                hash: FfiConverterTypeHashOutputWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: UnshieldedTokenType, into buf: inout [UInt8]) {
        FfiConverterTypeHashOutputWrapper.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnshieldedTokenType_lift(_ buf: RustBuffer) throws -> UnshieldedTokenType {
    return try FfiConverterTypeUnshieldedTokenType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnshieldedTokenType_lower(_ value: UnshieldedTokenType) -> RustBuffer {
    return FfiConverterTypeUnshieldedTokenType.lower(value)
}


public struct UserAddress {
    public var hash: HashOutputWrapper

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: HashOutputWrapper) {
        self.hash = hash
    }
}

#if compiler(>=6)
extension UserAddress: Sendable {}
#endif


extension UserAddress: Equatable, Hashable {
    public static func ==(lhs: UserAddress, rhs: UserAddress) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserAddress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserAddress {
        return
            try UserAddress(
                hash: FfiConverterTypeHashOutputWrapper.read(from: &buf)
        )
    }

    public static func write(_ value: UserAddress, into buf: inout [UInt8]) {
        FfiConverterTypeHashOutputWrapper.write(value.hash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserAddress_lift(_ buf: RustBuffer) throws -> UserAddress {
    return try FfiConverterTypeUserAddress.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserAddress_lower(_ value: UserAddress) -> RustBuffer {
    return FfiConverterTypeUserAddress.lower(value)
}


public struct UtxoOutput {
    public var value: Int64
    public var owner: UserAddress
    public var tokenType: UnshieldedTokenType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: Int64, owner: UserAddress, tokenType: UnshieldedTokenType) {
        self.value = value
        self.owner = owner
        self.tokenType = tokenType
    }
}

#if compiler(>=6)
extension UtxoOutput: Sendable {}
#endif


extension UtxoOutput: Equatable, Hashable {
    public static func ==(lhs: UtxoOutput, rhs: UtxoOutput) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.owner != rhs.owner {
            return false
        }
        if lhs.tokenType != rhs.tokenType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(owner)
        hasher.combine(tokenType)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUtxoOutput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UtxoOutput {
        return
            try UtxoOutput(
                value: FfiConverterInt64.read(from: &buf), 
                owner: FfiConverterTypeUserAddress.read(from: &buf), 
                tokenType: FfiConverterTypeUnshieldedTokenType.read(from: &buf)
        )
    }

    public static func write(_ value: UtxoOutput, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.value, into: &buf)
        FfiConverterTypeUserAddress.write(value.owner, into: &buf)
        FfiConverterTypeUnshieldedTokenType.write(value.tokenType, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUtxoOutput_lift(_ buf: RustBuffer) throws -> UtxoOutput {
    return try FfiConverterTypeUtxoOutput.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUtxoOutput_lower(_ value: UtxoOutput) -> RustBuffer {
    return FfiConverterTypeUtxoOutput.lower(value)
}


public struct UtxoSpend {
    public var value: Int64
    public var owner: Data
    public var tokenType: UnshieldedTokenType
    public var intentHash: IntentHash
    public var outputNo: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: Int64, owner: Data, tokenType: UnshieldedTokenType, intentHash: IntentHash, outputNo: UInt32) {
        self.value = value
        self.owner = owner
        self.tokenType = tokenType
        self.intentHash = intentHash
        self.outputNo = outputNo
    }
}

#if compiler(>=6)
extension UtxoSpend: Sendable {}
#endif


extension UtxoSpend: Equatable, Hashable {
    public static func ==(lhs: UtxoSpend, rhs: UtxoSpend) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.owner != rhs.owner {
            return false
        }
        if lhs.tokenType != rhs.tokenType {
            return false
        }
        if lhs.intentHash != rhs.intentHash {
            return false
        }
        if lhs.outputNo != rhs.outputNo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(owner)
        hasher.combine(tokenType)
        hasher.combine(intentHash)
        hasher.combine(outputNo)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUtxoSpend: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UtxoSpend {
        return
            try UtxoSpend(
                value: FfiConverterInt64.read(from: &buf), 
                owner: FfiConverterData.read(from: &buf), 
                tokenType: FfiConverterTypeUnshieldedTokenType.read(from: &buf), 
                intentHash: FfiConverterTypeIntentHash.read(from: &buf), 
                outputNo: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: UtxoSpend, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.value, into: &buf)
        FfiConverterData.write(value.owner, into: &buf)
        FfiConverterTypeUnshieldedTokenType.write(value.tokenType, into: &buf)
        FfiConverterTypeIntentHash.write(value.intentHash, into: &buf)
        FfiConverterUInt32.write(value.outputNo, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUtxoSpend_lift(_ buf: RustBuffer) throws -> UtxoSpend {
    return try FfiConverterTypeUtxoSpend.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUtxoSpend_lower(_ value: UtxoSpend) -> RustBuffer {
    return FfiConverterTypeUtxoSpend.lower(value)
}


public struct WrappedIr {
    public var data: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: Data) {
        self.data = data
    }
}

#if compiler(>=6)
extension WrappedIr: Sendable {}
#endif


extension WrappedIr: Equatable, Hashable {
    public static func ==(lhs: WrappedIr, rhs: WrappedIr) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWrappedIr: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WrappedIr {
        return
            try WrappedIr(
                data: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: WrappedIr, into buf: inout [UInt8]) {
        FfiConverterData.write(value.data, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWrappedIr_lift(_ buf: RustBuffer) throws -> WrappedIr {
    return try FfiConverterTypeWrappedIr.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWrappedIr_lower(_ value: WrappedIr) -> RustBuffer {
    return FfiConverterTypeWrappedIr.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ClaimKind {
    
    case reward
    case cardanoBridge
}


#if compiler(>=6)
extension ClaimKind: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeClaimKind: FfiConverterRustBuffer {
    typealias SwiftType = ClaimKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClaimKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .reward
        
        case 2: return .cardanoBridge
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ClaimKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .reward:
            writeInt(&buf, Int32(1))
        
        
        case .cardanoBridge:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClaimKind_lift(_ buf: RustBuffer) throws -> ClaimKind {
    return try FfiConverterTypeClaimKind.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClaimKind_lower(_ value: ClaimKind) -> RustBuffer {
    return FfiConverterTypeClaimKind.lower(value)
}


extension ClaimKind: Equatable, Hashable {}







public enum FfiError: Swift.Error {

    
    
    case InvalidInput(details: String
    )
    case DeserializeError(details: String
    )
    case UnsupportedVariant(details: String
    )
    case SegmentMismatch(details: String
    )
    case AlreadyProofErased
    case Internal(details: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiError: FfiConverterRustBuffer {
    typealias SwiftType = FfiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidInput(
            details: try FfiConverterString.read(from: &buf)
            )
        case 2: return .DeserializeError(
            details: try FfiConverterString.read(from: &buf)
            )
        case 3: return .UnsupportedVariant(
            details: try FfiConverterString.read(from: &buf)
            )
        case 4: return .SegmentMismatch(
            details: try FfiConverterString.read(from: &buf)
            )
        case 5: return .AlreadyProofErased
        case 6: return .Internal(
            details: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidInput(details):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(details, into: &buf)
            
        
        case let .DeserializeError(details):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(details, into: &buf)
            
        
        case let .UnsupportedVariant(details):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(details, into: &buf)
            
        
        case let .SegmentMismatch(details):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(details, into: &buf)
            
        
        case .AlreadyProofErased:
            writeInt(&buf, Int32(5))
        
        
        case let .Internal(details):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(details, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiError_lift(_ buf: RustBuffer) throws -> FfiError {
    return try FfiConverterTypeFfiError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiError_lower(_ value: FfiError) -> RustBuffer {
    return FfiConverterTypeFfiError.lower(value)
}


extension FfiError: Equatable, Hashable {}




extension FfiError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TokenType {
    
    case unshielded
    case shielded
    case dust
}


#if compiler(>=6)
extension TokenType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTokenType: FfiConverterRustBuffer {
    typealias SwiftType = TokenType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TokenType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .unshielded
        
        case 2: return .shielded
        
        case 3: return .dust
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TokenType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .unshielded:
            writeInt(&buf, Int32(1))
        
        
        case .shielded:
            writeInt(&buf, Int32(2))
        
        
        case .dust:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTokenType_lift(_ buf: RustBuffer) throws -> TokenType {
    return try FfiConverterTypeTokenType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTokenType_lower(_ value: TokenType) -> RustBuffer {
    return FfiConverterTypeTokenType.lower(value)
}


extension TokenType: Equatable, Hashable {}






#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeProvingKeyMaterial: FfiConverterRustBuffer {
    typealias SwiftType = ProvingKeyMaterial?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeProvingKeyMaterial.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeProvingKeyMaterial.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeWrappedIr: FfiConverterRustBuffer {
    typealias SwiftType = WrappedIr?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWrappedIr.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWrappedIr.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = [UInt64?]

    public static func write(_ value: [UInt64?], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterOptionUInt64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64?] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt64?]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterOptionUInt64.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringData: FfiConverterRustBuffer {
    public static func write(_ value: [String: Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterData.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Data] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Data]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterData.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
public func addressFromKey(key: String)throws  -> UserAddress  {
    return try  FfiConverterTypeUserAddress_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_address_from_key(
        FfiConverterString.lower(key),$0
    )
})
}
public func coinCommitment(coinInfo: ShieldedCoinInfo, coinPublicKey: PublicKey) -> Commitment  {
    return try!  FfiConverterTypeCommitment_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_coin_commitment(
        FfiConverterTypeShieldedCoinInfo_lower(coinInfo),
        FfiConverterTypePublicKey_lower(coinPublicKey),$0
    )
})
}
public func coinNullifier(coinInfo: String, coinSecretKey: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_coin_nullifier(
        FfiConverterString.lower(coinInfo),
        FfiConverterString.lower(coinSecretKey),$0
    )
})
}
public func commitmentFromBytes(bytes: Data)throws  -> Commitment  {
    return try  FfiConverterTypeCommitment_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_commitment_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func createCheckPayload(preimage: ProofPreimageVersioned, ir: WrappedIr?)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_create_check_payload(
        FfiConverterTypeProofPreimageVersioned_lower(preimage),
        FfiConverterOptionTypeWrappedIr.lower(ir),$0
    )
})
}
public func createProvingPayload(preimage: ProofPreimageVersioned, overwriteBindingInput: String?, keyMaterial: ProvingKeyMaterial?)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_create_proving_payload(
        FfiConverterTypeProofPreimageVersioned_lower(preimage),
        FfiConverterOptionString.lower(overwriteBindingInput),
        FfiConverterOptionTypeProvingKeyMaterial.lower(keyMaterial),$0
    )
})
}
public func createProvingTransactionPayload(txSerialized: Data, provingData: [String: Data])throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_create_proving_transaction_payload(
        FfiConverterData.lower(txSerialized),
        FfiConverterDictionaryStringData.lower(provingData),$0
    )
})
}
public func createShieldedCoinInfo(tokenType: ShieldedTokenType, value: Int64) -> ShieldedCoinInfo  {
    return try!  FfiConverterTypeShieldedCoinInfo_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_create_shielded_coin_info(
        FfiConverterTypeShieldedTokenType_lower(tokenType),
        FfiConverterInt64.lower(value),$0
    )
})
}
public func dustParametersDeserialize(raw: Data)throws  -> DustParameters  {
    return try  FfiConverterTypeDustParameters_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_dust_parameters_deserialize(
        FfiConverterData.lower(raw),$0
    )
})
}
public func dustParametersNew(nightDustRatio: UInt64, generationDecayRate: UInt32, dustGracePeriodSeconds: Int64)throws  -> DustParameters  {
    return try  FfiConverterTypeDustParameters_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_dust_parameters_new(
        FfiConverterUInt64.lower(nightDustRatio),
        FfiConverterUInt32.lower(generationDecayRate),
        FfiConverterInt64.lower(dustGracePeriodSeconds),$0
    )
})
}
public func feeToken() -> TokenType  {
    return try!  FfiConverterTypeTokenType_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_fee_token($0
    )
})
}
public func hello()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_hello($0
    )
})
}
public func intentHashFromBytes(bytes: Data)throws  -> IntentHash  {
    return try  FfiConverterTypeIntentHash_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_intent_hash_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func ledgerParametersDeserialize(raw: Data)throws  -> LedgerParameters  {
    return try  FfiConverterTypeLedgerParameters_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_ledger_parameters_deserialize(
        FfiConverterData.lower(raw),$0
    )
})
}
public func ledgerParametersDummyParameters()throws  -> LedgerParameters  {
    return try  FfiConverterTypeLedgerParameters_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_ledger_parameters_dummy_parameters($0
    )
})
}
public func nativeToken() -> TokenType  {
    return try!  FfiConverterTypeTokenType_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_native_token($0
    )
})
}
public func nonceFromBytes(bytes: Data)throws  -> Nonce  {
    return try  FfiConverterTypeNonce_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_nonce_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func nullifierFromBytes(bytes: Data)throws  -> Nullifier  {
    return try  FfiConverterTypeNullifier_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_nullifier_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func parseCheckResult(result: Data)throws  -> [UInt64?]  {
    return try  FfiConverterSequenceOptionUInt64.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_parse_check_result(
        FfiConverterData.lower(result),$0
    )
})
}
public func proofPreimageVersionedDeserialize(data: Data)throws  -> ProofPreimageVersioned  {
    return try  FfiConverterTypeProofPreimageVersioned_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_proof_preimage_versioned_deserialize(
        FfiConverterData.lower(data),$0
    )
})
}
public func proofVersionedDeserialize(data: Data)throws  -> ProofVersioned  {
    return try  FfiConverterTypeProofVersioned_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_proof_versioned_deserialize(
        FfiConverterData.lower(data),$0
    )
})
}
public func provingKeyMaterialNew(proverKey: Data, verifierKey: Data, irSource: Data) -> ProvingKeyMaterial  {
    return try!  FfiConverterTypeProvingKeyMaterial_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_proving_key_material_new(
        FfiConverterData.lower(proverKey),
        FfiConverterData.lower(verifierKey),
        FfiConverterData.lower(irSource),$0
    )
})
}
public func publicKeyFromBytes(bytes: Data)throws  -> PublicKey  {
    return try  FfiConverterTypePublicKey_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_public_key_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func sampleCoinPublicKey() -> PublicKey  {
    return try!  FfiConverterTypePublicKey_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_sample_coin_public_key($0
    )
})
}
public func sampleEncryptionPublicKey()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_sample_encryption_public_key($0
    )
})
}
public func sampleIntentHash() -> IntentHash  {
    return try!  FfiConverterTypeIntentHash_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_sample_intent_hash($0
    )
})
}
public func shieldedToken() -> TokenType  {
    return try!  FfiConverterTypeTokenType_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_shielded_token($0
    )
})
}
public func shieldedTokenTypeFromBytes(bytes: Data)throws  -> ShieldedTokenType  {
    return try  FfiConverterTypeShieldedTokenType_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_shielded_token_type_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func transactionCostModelDeserialize(raw: Data)throws  -> TransactionCostModel  {
    return try  FfiConverterTypeTransactionCostModel_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_transaction_cost_model_deserialize(
        FfiConverterData.lower(raw),$0
    )
})
}
public func transactionCostModelDummy()throws  -> TransactionCostModel  {
    return try  FfiConverterTypeTransactionCostModel_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_transaction_cost_model_dummy($0
    )
})
}
public func transactionHashFromBytes(bytes: Data)throws  -> TransactionHash  {
    return try  FfiConverterTypeTransactionHash_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_transaction_hash_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func unshieldedToken() -> TokenType  {
    return try!  FfiConverterTypeTokenType_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_unshielded_token($0
    )
})
}
public func unshieldedTokenTypeFromBytes(bytes: Data)throws  -> UnshieldedTokenType  {
    return try  FfiConverterTypeUnshieldedTokenType_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_unshielded_token_type_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func userAddressFromBytes(bytes: Data)throws  -> UserAddress  {
    return try  FfiConverterTypeUserAddress_lift(try rustCallWithError(FfiConverterTypeFfiError_lift) {
    uniffi_ledger_uniffi_fn_func_user_address_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
public func wrappedIrNew(data: Data) -> WrappedIr  {
    return try!  FfiConverterTypeWrappedIr_lift(try! rustCall() {
    uniffi_ledger_uniffi_fn_func_wrapped_ir_new(
        FfiConverterData.lower(data),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_ledger_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_address_from_key() != 617) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_coin_commitment() != 21117) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_coin_nullifier() != 53700) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_commitment_from_bytes() != 5636) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_create_check_payload() != 60573) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_create_proving_payload() != 65358) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_create_proving_transaction_payload() != 18183) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_create_shielded_coin_info() != 17159) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_dust_parameters_deserialize() != 10992) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_dust_parameters_new() != 36576) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_fee_token() != 55200) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_hello() != 44083) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_intent_hash_from_bytes() != 48730) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_ledger_parameters_deserialize() != 52237) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_ledger_parameters_dummy_parameters() != 12794) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_native_token() != 43378) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_nonce_from_bytes() != 50922) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_nullifier_from_bytes() != 61263) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_parse_check_result() != 36954) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_proof_preimage_versioned_deserialize() != 29881) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_proof_versioned_deserialize() != 22761) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_proving_key_material_new() != 53431) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_public_key_from_bytes() != 21629) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_sample_coin_public_key() != 17283) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_sample_encryption_public_key() != 8984) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_sample_intent_hash() != 19505) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_shielded_token() != 38277) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_shielded_token_type_from_bytes() != 14174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_transaction_cost_model_deserialize() != 48928) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_transaction_cost_model_dummy() != 11932) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_transaction_hash_from_bytes() != 36885) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_unshielded_token() != 23207) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_unshielded_token_type_from_bytes() != 36583) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_user_address_from_bytes() != 12274) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_func_wrapped_ir_new() != 24325) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_dustparameters_dust_grace_period_seconds() != 766) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_dustparameters_generation_decay_rate() != 41027) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_dustparameters_night_dust_ratio() != 5550) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_dustparameters_serialize() != 62213) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_dustparameters_time_to_cap_seconds() != 37021) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_dustparameters_to_string() != 19650) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_ledgerparameters_dust() != 5408) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_ledgerparameters_serialize() != 24544) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_ledgerparameters_to_string() != 17252) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_ledgerparameters_transaction_cost_model() != 64714) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_proofpreimageversioned_serialize() != 56094) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_proofversioned_serialize() != 34289) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_transactioncostmodel_serialize() != 13033) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ledger_uniffi_checksum_method_transactioncostmodel_to_string() != 37355) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureLedgerUniffiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all