// This file is part of midnight-ledger.
// Copyright (C) 2025 Midnight Foundation
// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import CompactStandardLibrary;

ledger burnContract: ContractAddress;
ledger tmpEpComm: Bytes<32>;

witness tmpDoCall(coin: ShieldedCoinInfo): [];
witness tmpCallRand(): Field;

export circuit send_to_burn(coin: ShieldedCoinInfo): [] {
  receiveShielded(disclose(coin));
  // The -1 is a work around for PM-11279.
  // This should be removable on the next compiler release, but this did not
  // seem sufficient justification to bump the compiler pulled in.
  const sendValue = coin.value == 0 ? 0 : coin.value - 1;
  const res = sendImmediateShielded(disclose(coin), right<ZswapCoinPublicKey, ContractAddress>(burnContract), disclose(sendValue));
  tmpDoCall(res.sent);
  const cc = transientCommit<ShieldedCoinInfo>(res.sent, tmpCallRand());
  kernel.claimContractCall(burnContract.bytes, tmpEpComm, cc);
}
